{"version":3,"sources":["logo.svg","components/login.js","components/register.js","containers/todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","state","userid","this","refs","value","password","pwd","obj","options","mode","method","headers","body","JSON","stringify","fetch","response","json","data","console","log","setState","message","className","ref","type","placeholder","onClick","doLogin","bind","React","Component","Register","doRegister","ToDo","show","val","jsx","showHide","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.42575407.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nexport class Login extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n   async doLogin(){\n        let userid = this.refs.userid.value;\n        let password = this.refs.pwd.value;\n        let obj = {userid:userid, pwd:password};\n        const url = 'http://localhost:1234/reactlogin';\n        const options = {\n            mode:'cors',\n            method:'POST',\n            headers:{\n             'Content-Type':'application/json'\n            },\n            body:JSON.stringify(obj)\n        }\n        let response = await fetch(url,options);\n        let data = await response.json();\n        console.log('Response is ',data);\n        this.setState({'message':data.message});\n    }\n\n    render(){\n        return (\n            <>\n            <h2 className='alert-info text-center'>Login {this.state.message}</h2>\n            <div className='form-group'>\n                <label>Userid</label>\n                <input ref=\"userid\" className='form-control' type='text' placeholder='Type Userid Here'/>\n            </div>\n            <div className='form-group'>\n                <label>Password</label>\n                <input ref=\"pwd\" className='form-control' type='password' placeholder='Type Password Here'/>\n            </div>\n            <div className='form-group'>\n                <button onClick={this.doLogin.bind(this)} className='btn btn-primary'>Login</button>\n            </div>\n            </>\n        )\n    }\n}","import React from 'react';\nexport class Register extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n   async doRegister(){\n        let userid = this.refs.userid.value;\n        let password = this.refs.pwd.value;\n        let obj = {userid:userid, pwd:password};\n        const url = 'http://localhost:1234/reactregister';\n        const options = {\n            mode:'cors',\n            method:'POST',\n            headers:{\n             'Content-Type':'application/json'\n            },\n            body:JSON.stringify(obj)\n        }\n        let response = await fetch(url,options);\n        let data = await response.json();\n        console.log('Response is ',data);\n        this.setState({'message':data.message});\n    }\n\n    render(){\n        return (\n            <>\n            <h2 className='alert-info text-center'>Register {this.state.message}</h2>\n            <div className='form-group'>\n                <label>Userid</label>\n                <input ref=\"userid\" className='form-control' type='text' placeholder='Type Userid Here'/>\n            </div>\n            <div className='form-group'>\n                <label>Password</label>\n                <input ref=\"pwd\" className='form-control' type='password' placeholder='Type Password Here'/>\n            </div>\n            <div className='form-group'>\n                <button onClick={this.doRegister.bind(this)} className='btn btn-primary'>Register</button>\n            </div>\n            </>\n        )\n    }\n}","import React from 'react';\nimport { Login } from '../components/login';\nimport { Register } from '../components/register';\nexport class ToDo extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            show:0\n        }\n    }\n    showHide(val){\n        this.setState({show:val});\n    }\n    render(){\n        const mystyle = {\n            color:'red',\n            backgroundColor:'green'\n        }\n        let jsx ;\n        if(this.state.show==1){\n            jsx = <Login/>;\n        }\n        else\n        if(this.state.show == 2){\n            jsx = <Register/>;\n        }\n        else{\n            jsx = <></>;\n        }\n        return (\n            <div className='container'>\n                <button onClick={()=>{\n                    this.showHide(1);\n                }} className='btn btn-primary mr-2'>Login</button>\n\n                <button onClick={()=>{\n                    this.showHide(2);\n                }} className='btn btn-success'>Create Account</button>\n                <br/>\n                {jsx}\n\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ToDo } from './containers/todo';\n\nfunction App() {\n  return (\n    <div>\n      <ToDo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}